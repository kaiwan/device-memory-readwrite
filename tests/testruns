#!/bin/bash
name=$(basename $0)

dir=$(basename $(pwd))
if [[ "${dir}" != "tests" ]]; then
	echo "${name}: expect you run the test cases script from the app_rwmem directory"
	exit 1
fi

PASS_STR="---Test PASSED---"
APP_LOC=../app_rwmem
DRV_LOC=../drv_rwmem
KDRV=devmem_rw

failit()
{
	echo "*FAIL*"
	echo "Restore usermode ASLR setting"
	sudo sh -c "echo ${ASLR} > /proc/sys/kernel/randomize_va_space"
	exit 1
}

x64_pio_test()
{
echo "================= IO port (PIO) Test ========================="
PIO=sample_keybd_read
if [[ -f ./${PIO} ]] ; then
    echo "Running script \"${PIO} -t\" now, pl wait ..."
	sudo ./${PIO} -t #>/dev/null   # run the script as a testcase, 3 iterations only
	if [[ $? -ne 0 ]] ; then
		failit
	else
		echo "${PASS_STR}"
	fi
else
	echo "Script ${PIO} not present? aborting..."
	exit 1
fi
}

prep_devmem_drv()
{
(
cd ${DRV_LOC}
echo "
$(basename $(pwd)): Building driver module..."
make >/dev/null 2>&1 || failit
sudo rmmod ${KDRV} 2>/dev/null
sudo dmesg -C
sudo insmod ./${KDRV}.ko || failit
lsmod |grep -w ${KDRV}
)
(
cd ${APP_LOC}
echo "
$(basename $(pwd)): Building apps..."
make >/dev/null 2>&1 || failit
)
echo "Turn OFF usermode ASLR"
sudo sh -c "echo 0 > /proc/sys/kernel/randomize_va_space"
}

userspace_ram_rdwr_test()
{
local WRMEM_DBG=../app_rwmem/wrmem_dbg
local BYTES2WRITE=0x112233ee
local EXPECT2READ="ee 33 22 11"  # on little-endian systems

echo
echo "================= Userspace RAM memory rd/wr Test ========================="
prep_devmem_drv

sudo ${WRMEM_DBG} > /tmp/.t1
uva=$(grep "gbuf @" /tmp/.t1 |awk '{print $3}')
[[ -z "${uva}" ]] && {
	echo "${WRMEM_DBG} failed to obtain sample debug UVA? aborting..."
	failit
}
echo "uva=${uva}"

echo "sudo ${WRMEM_DBG} ${uva} ${BYTES2WRITE} > tmp 2>/dev/null"
sudo ${WRMEM_DBG} ${uva} ${BYTES2WRITE} > tmp 2>/dev/null || failit
grep "^00000000 *${EXPECT2READ}" tmp >/dev/null 2>&1
[[ $? -ne 0 ]] && failit || echo "${PASS_STR}"
rm -f tmp

#echo "Restore usermode ASLR setting"
#sudo sh -c "echo ${ASLR} > /proc/sys/kernel/randomize_va_space"
}

PROCMAP=procmap
kernelspace_ram_rd_test()
{
echo
hash ${PROCMAP} 2>/dev/null || {
	echo "${name}: expect to have the *procmap* utility project installed and in the PATH"
	echo "URL: https://github.com/kaiwan/procmap"
	echo "First pl install it and set the PATH, then rerun this script."
	failit
}
echo "================= Kernel-space RAM memory read Test ========================="

echo "Running ${PROCMAP} now to obtain the kernel's PAGE_OFFSET value:
${PROCMAP} --pid=1 --only-kernel --verbose |grep "^PAGE_OFFSET" |awk '{print \$3}'"
PGOFF=$(${PROCMAP} --pid=1 --only-kernel --verbose |grep "^PAGE_OFFSET" |awk '{print $3}') || failit
echo "PAGE_OFFSET via ${PROCMAP}: ${PGOFF}"
sudo rmmod ${PROCMAP}
prep_devmem_drv

local RAMFILE=/tmp/ram_first16M.txt
local SIZE2READ=$((16*1024*1024))   # 16M
echo "
Using devmem_rw to read the first $((${SIZE2READ}/(1024*1024))) MB of RAM now into the file ${RAMFILE}... patience ...
sudo ${APP_LOC}/rdmem ${PGOFF} ${SIZE2READ} > ${RAMFILE}"
sudo ${APP_LOC}/rdmem ${PGOFF} ${SIZE2READ} > ${RAMFILE} || failit && echo "${PASS_STR}"

echo "
To see possibly interesting portions of the first $((${SIZE2READ}/(1024*1024))) MB of RAM, run this cmd:
egrep -v \
\"00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 | ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff\" \
${RAMFILE}"
#rm -f ${RAMFILE}
}

kernel_read_test()
{
echo "
>>> sudo cat /proc/iomem"
sudo cat /proc/iomem

local my_iobase_start my_iobase_end
echo ">>> Region to capture (MMIO) range details:"
read -p "> Enter start address: " my_iobase_start
read -p "> Enter end address  : " my_iobase_end
read -p "> Enter region (new) name: " my_name
my_iobase_start=0x${my_iobase_start}
my_iobase_end=0x${my_iobase_end}
local len=$((my_iobase_end-my_iobase_start+1))

sudo dmesg -C
sudo rmmod ${KDRV} 2>/dev/null
echo ">>> sudo insmod ${DRV_LOC}/${KDRV}.ko iobase_start=${my_iobase_start} iobase_len=${len} reg_name=${my_name} force_rel=1"
sudo insmod ${DRV_LOC}/${KDRV}.ko iobase_start=${my_iobase_start} iobase_len=${len} reg_name=${my_name} force_rel=1
[[ $? -ne 0 ]] && {
  echo "Failed; kernel log follows:"
  sudo dmesg
  failit
}
echo "---"
sudo grep --color=always ${my_iobase_start:2} /proc/iomem
echo "---"

# read some of it...
local rlen=32
[[ ${len} -lt 32 ]] && rlen=${len}
echo ">>> sudo ${APP_LOC}/rdmem -o 0 ${rlen}"
sudo ${APP_LOC}/rdmem -o 0 ${rlen} || failit
echo "${PASS_STR}"
sudo rmmod ${KDRV}
}


#--- 'main'
ASLR=$(cat /proc/sys/kernel/randomize_va_space)
sudo rmmod ${KDRV} 2>/dev/null

#x64_pio_test
userspace_ram_rdwr_test
#kernelspace_ram_rd_test
#kernel_read_test

echo "Restore usermode ASLR setting"
sudo sh -c "echo ${ASLR} > /proc/sys/kernel/randomize_va_space"
exit 0
